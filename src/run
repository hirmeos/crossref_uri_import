#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Find identifiers in Crossref and submit them to the identifier translation
service if they are missing.

usage: python run

(c) Javier Arias, Open Book Publishers, October 2018
Use of this software is governed by the terms of the MIT license

Dependencies:
  httplib2==0.10.3
"""

import os
import sys
import json
import httplib2

USER_AGENT        = os.environ['USER_AGENT']
CROSSREF_ROWS     = os.environ['CROSSREF_ROWS']
REPORT_DUPLICATES = os.environ['REPORT_DUPLICATES'] in ["True", "true", "t", 1]
URI_API_ENDP      = os.environ['URI_API_ENDP']
JWT_DISABLED = str(os.environ.get('JWT_DISABLED')).lower() in ('true', '1')
if not JWT_DISABLED:
    URI_API_USER      = os.environ['URI_API_USER']
    URI_API_PASS      = os.environ['URI_API_PASS']
    AUTH_API_ENDP     = os.environ['AUTH_API_ENDP']
URI_API_WORKS     = os.environ['URI_API_WORKS']
URI_API_URIS      = os.environ['URI_API_URIS']
URI_API_TITLES    = os.environ['URI_API_TITLES']
IGNORED_DOIS      = json.loads(os.getenv('IGNORED_DOIS'))
EXCLUDED_DOIS     = json.loads(os.getenv('EXCLUDED_DOIS'))


def get_token(url, email, passwd):
    h = httplib2.Http()
    credentials = {'email': email, 'password': passwd}
    headers = {'content-type': 'application/json'}
    res, content = h.request(url, 'POST', json.dumps(credentials), headers)
    if res.status != 200:
        raise ValueError(content.decode('utf-8'))
    return json.loads(content.decode('utf-8'))['data'][0]['token']


def get_all_books():
    filters = 'work_type:monograph,work_type:book,' \
              + 'uri_scheme:info:doi,uri_scheme:urn:isbn,' \
              + 'uri_scheme:http,uri_scheme:https'
    url = URI_API_WORKS + '?filter=' + filters
    h = httplib2.Http()
    headers = {} if JWT_DISABLED else {'Authorization': AUTH}
    res, content = h.request(url, 'GET', headers=headers)
    if res.status != 200:
        raise ValueError(content.decode('utf-8'))
    return json.loads(content.decode('utf-8'))['data']


def get_related_works(serialised_isbns, wtype):
    api = "https://api.crossref.org/works"
    filters = "filter=type:" + wtype + "," + serialised_isbns
    select = "select=title,DOI,ISBN,type,URL,link"
    rows = "rows=" + CROSSREF_ROWS
    url = api + '?' + filters + '&' + select + '&' + rows
    h = httplib2.Http()
    res, content = h.request(url, 'GET', headers={'User-Agent': USER_AGENT})
    if res.status != 200:
        raise ValueError(content.decode('utf-8'))
    return json.loads(content.decode('utf-8'))['message']['items']


def submit(url, data):
    h = httplib2.Http()
    if JWT_DISABLED:
        headers = {'content-type': 'application/json'}
    else:
        headers = {'content-type': 'application/json', 'Authorization': AUTH}
    res, content = h.request(url, 'POST', json.dumps(data), headers)
    if res.status != 200:
        print(content.decode('utf-8'), file=sys.stderr)


def get_doi_from_uris(uris):
    for uri in uris:
        if uri['URI_parts']['scheme'] == 'info:doi':
            return uri['URI_parts']['value']
    return ''


def get_isbns_from_uris(uris):
    isbns = []
    for uri in uris:
        if uri['URI_parts']['scheme'] == 'urn:isbn':
            isbns.append(uri['URI_parts']['value'])
    return isbns


def get_urls_from_uris(uris):
    urls = []
    for uri in uris:
        if uri['URI_parts']['scheme'] in ['http', 'https']:
            urls.append(uri['URI'])
    return urls


def get_uri_from_uris(uri, uris):
    for e in uris:
        if e['URI'] == uri:
            return e['URI']
    return ''


def serialise_isbn(isbn):
    return 'isbn:' + isbn + ','


def standarise_uri(uri, canonical="false"):
    return {'URI': uri, 'canonical': canonical}


def standarise_uris(uris):
    return [standarise_uri(e) for e in uris]


def process_works(works):
    for work in works:
        # get all pertinent identifiers from the record
        try:
            uuid  = work['UUID']
            uris  = work['URI']
            isbns = get_isbns_from_uris(uris)
            doi   = get_doi_from_uris(uris)
            wtype = work['type']
            if not uuid or not isbns or not doi:
                raise AssertionError
        except AssertionError:
            sys.stderr.write("Malformed record: " + str(work) + "\n")
            sys.exit(1)

        if doi in EXCLUDED_DOIS:
            continue

        # query crossref to find URIs associated to this book's ISBNs
        try:
            serialised_isbns = ''.join([serialise_isbn(i) for i in isbns])
            related_works = get_related_works(serialised_isbns, wtype)
            if not related_works:
                raise AssertionError
        except (ValueError, AssertionError):
            if doi not in IGNORED_DOIS:
                sys.stderr.write("Record not found in Crossreff: %s\n" % (doi))
            continue

        # optional: output error if there are multiple deposits for this book
        try:
            if len(related_works) != 1 and REPORT_DUPLICATES:
                raise AssertionError
        except (ValueError, AssertionError):
            sys.stderr.write("More thank one match! " + str(related_works))

        # insert input URIs and titles if not already in database
        for related in related_works:
            isbns = ["urn:isbn:" + i for i in related['ISBN']]
            doi = "info:doi:" + related['DOI']
            input_uris = standarise_uris(isbns)
            input_uris.append(standarise_uri(doi))
            input_uris.append(standarise_uri(related['URL']))

            # Text-mining and similarity-checking URLs may be found in 'link'
            try:
                for l in related['link']:
                    input_uris.append(standarise_uri(l['URL']))
            except KeyError:
                pass

            for uri in input_uris:
                candidate = get_uri_from_uris(uri['URI'], uris)
                if candidate != '':
                    continue
                new_uri = {'UUID': uuid, 'URI': uri['URI']}
                submit(URI_API_URIS, new_uri)
            for title in related['title']:
                if title in work['title']:
                    continue
                new_title = {'UUID': uuid, 'title': title}
                submit(URI_API_TITLES, new_title)


def run():
    if not JWT_DISABLED and not API_JWTOKEN:
        raise AssertionError('Could not obtain JWT. Check credentials.')
    all_works = get_all_books()
    if not all_works:
        AssertionError('Could not obtain publications. Check API.')
    process_works(all_works)


if not JWT_DISABLED:
    API_JWTOKEN = get_token(AUTH_API_ENDP, URI_API_USER, URI_API_PASS)
    AUTH = 'Bearer ' + API_JWTOKEN

if __name__ == '__main__':
    run()
